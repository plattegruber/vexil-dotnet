<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vexil</name>
    </assembly>
    <members>
        <member name="T:Vexil.AdHocFeatureFlagProvider">
            <summary>
            TODO: XML docs
            </summary>
        </member>
        <member name="M:Vexil.AdHocFeatureFlagProvider.IsEnabled(System.String)">
            <summary>
            TODO: XML docs
            </summary>
            <param name="featureFlag"></param>
            <returns></returns>
        </member>
        <member name="T:Vexil.Exceptions.MissingProviderException">
            <summary>
            An exception thrown when no provider has been configured.
            </summary>
        </member>
        <member name="M:Vexil.Exceptions.MissingProviderException.#ctor">
            <see cref="M:System.Exception.#ctor"></see>
        </member>
        <member name="M:Vexil.Exceptions.MissingProviderException.#ctor(System.String)">
            <see cref="M:System.Exception.#ctor(System.String)"></see>
        </member>
        <member name="M:Vexil.Exceptions.MissingProviderException.#ctor(System.String,System.Exception)">
            <see cref="M:System.Exception.#ctor(System.String,System.Exception)"></see>
        </member>
        <member name="T:Vexil.Exceptions.ProviderException">
            <summary>
            An exception thrown when the underlying configured provider throws any exception.
            </summary>
        </member>
        <member name="M:Vexil.Exceptions.ProviderException.#ctor">
            <see cref="M:System.Exception.#ctor"></see>
        </member>
        <member name="M:Vexil.Exceptions.ProviderException.#ctor(System.String)">
            <see cref="M:System.Exception.#ctor(System.String)"></see>
        </member>
        <member name="M:Vexil.Exceptions.ProviderException.#ctor(System.String,System.Exception)">
            <see cref="M:System.Exception.#ctor(System.String,System.Exception)"></see>
        </member>
        <member name="T:Vexil.FeatureFlag">
            <summary>
            TODO: XML docs
            </summary>
        </member>
        <member name="P:Vexil.FeatureFlag.Name">
            <summary>
            TODO: XML docs
            </summary>
        </member>
        <member name="P:Vexil.FeatureFlag.Strategies">
            <summary>
            TODO: XML docs
            </summary>
        </member>
        <member name="M:Vexil.FeatureFlag.AllStrategyConditionsMet">
            <summary>
            TODO: XML docs
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vexil.FeatureFlagService">
            <summary>
            TODO: XML docs
            </summary>
        </member>
        <member name="M:Vexil.FeatureFlagService.GetAsync">
            <summary>
            TODO: XML docs
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vexil.FeatureFlagStore">
            <summary>
                An in-memory store of feature flags. An implementation of <see cref="T:Vexil.IFeatureFlagStore"/>
            </summary>
        </member>
        <member name="T:Vexil.IFeatureFlagProvider">
            <summary>
            TODO: XML docs
            </summary>
        </member>
        <member name="M:Vexil.IFeatureFlagProvider.IsEnabled(System.String)">
            <summary>
            TODO: XML docs
            </summary>
            <param name="featureFlag"></param>
            <returns></returns>
        </member>
        <member name="T:Vexil.IFeatureFlagService">
            <summary>
                A service that coordinates the fetching of feature flags from their source.
            </summary>
        </member>
        <member name="M:Vexil.IFeatureFlagService.GetAsync">
            <summary>
                Retreive the set of feature flags from their source.
            </summary>
            <returns> A set of <see cref="T:Vexil.FeatureFlag"/>s. </returns>
        </member>
        <member name="T:Vexil.IFeatureFlagStore">
            <summary>
                An in-memory store of feature flags.
            </summary>
        </member>
        <member name="T:Vexil.StrategicFeatureFlagProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Vexil.StrategicFeatureFlagProvider.#ctor(Vexil.IFeatureFlagStore,Vexil.IFeatureFlagService)">
            <summary>
            
            </summary>
            <param name="featureFlagStore"></param>
            <param name="featureFlagService"></param>
        </member>
        <member name="M:Vexil.StrategicFeatureFlagProvider.IsEnabled(System.String)">
            <summary>
            
            </summary>
            <param name="featureFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Vexil.StrategicFeatureFlagProvider.DiscoverAllAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vexil.Strategies.IStrategy">
            <summary>
                A condition or constraint that enables feature flag when met.
            </summary>
        </member>
        <member name="M:Vexil.Strategies.IStrategy.IsCriteriaMet(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Determine if the criteria is met for the strategy, given the current context. 
            </summary>
            <param name="parameters"> The context necessary for the strategy. </param>
            <returns> <see langword="true" /> if the strategy conditions are met, <see langword="false" /> otherwise. </returns>
        </member>
        <member name="T:Vexil.Strategies.UserIdStrategy">
            <summary>
                A feature flag strategy that enables the feature flag for a given set of user ids. An implementation
                of <see cref="T:Vexil.Strategies.IStrategy"/>.
            </summary>
        </member>
        <member name="M:Vexil.Strategies.UserIdStrategy.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:Vexil.Strategies.UserIdStrategy" /> class with the set
                of allowed user ids.
            </summary>
            <param name="allowedUserIds"> The user ids that this strategy is constrained to. </param>
        </member>
        <member name="M:Vexil.Strategies.UserIdStrategy.IsCriteriaMet(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Determine if the criteria is met for the strategy, given the current context. An implementation of
                <see cref="M:Vexil.Strategies.IStrategy.IsCriteriaMet(System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
            <param name="parameters"> 
                The context necessary for the strategy. In this case, the current user id will be needed.
            </param>
            <returns> 
                <see langword="true" /> if the strategy conditions are met, <see langword="false" /> otherwise. In
                this case, strategy conditions will be met when the given user id is in the set of allowed user
                ids.
            </returns>
        </member>
        <member name="T:Vexil.VexilBuilder">
            <summary>
                A builder for the <see cref="T:Vexil.VexilClient"/>.
            </summary>
        </member>
        <member name="M:Vexil.VexilBuilder.UseFeatureFlagProvider(Vexil.IFeatureFlagProvider)">
            <summary>
                Sets the <see cref="T:Vexil.IFeatureFlagProvider"/> to be used by the <see cref="T:Vexil.VexilClient"/>.
            </summary>
            <param name="featureFlagProvider"> The <see cref="T:Vexil.IFeatureFlagProvider"/> to be used. </param>
            <returns> The builder instance. </returns>
        </member>
        <member name="M:Vexil.VexilBuilder.Build">
            <summary>
                Gets the <see cref="T:Vexil.VexilClient"/> being configured.
            </summary>
            <returns> The <see cref="T:Vexil.VexilClient"/> being configured. </returns>
        </member>
        <member name="T:Vexil.VexilClient">
            <summary>
                The entry point for consumers of the Vexil library.
            </summary>
        </member>
        <member name="M:Vexil.VexilClient.#ctor(Vexil.IFeatureFlagProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:Vexil.VexilClient"/> class.
            </summary>
            <param name="featureFlagProvider"> The <see cref="T:Vexil.IFeatureFlagProvider"/> to be configured as a plugin. </param>
        </member>
        <member name="M:Vexil.VexilClient.IsEnabled(System.String)">
            <summary>
                <para>
                    Gets the current value of the requested feature flag by name.
                </para>
                <para>
                    If the feature flag is missing or the configured plugin throws an exception, this method will default to
                    <see langword="false" />. If the plugin failed to properly configure, a <see cref="T:Vexil.Exceptions.MissingProviderException"/>
                    will be thrown.
                </para>
            </summary>
            <exception cref="T:Vexil.Exceptions.MissingProviderException"></exception>
            <param name="flag"> The slug or name of the feature flag. </param>
            <returns> <see langword="true" /> if the flag is enabled given the current context. <see langword="false" /> otherwise. </returns>
        </member>
    </members>
</doc>
